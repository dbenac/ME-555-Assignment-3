##### Baxter Robot Code - Assignment 3 #####
# Taken from example code @ http://sdk.rethinkrobotics.com/wiki/Hello_Baxter

##### Step-by-step instructions #####
### Set-up and installation ###
# Make sure Baxter is enabled:
$ rosrun baxter_tools enable_robot.py -e

# Start an Interactive Python Shell
$ python

# Import the necessary Python modules

# rospy - ROS Python API
import rospy

# baxter_interface - Baxter Python API
import baxter_interface

# initialize our ROS node, registering it with the Master
rospy.init_node('Hello_Baxter')

# create an instance of baxter_interface's Limb class
limb_r = baxter_interface.Limb('right')
limb_l = baxter_interface.Limb('left')

# get the right limb's current joint angles
angles_r = limb_r.joint_angles()
angles_l = limb_l.joint_angles()

### Discover limb location ###
# manually move arm to desired location
# print the current joint angles
print angles_r
print angles_l

# use code to below to move limb(s) back to that desired location
# reassign new joint angles (all zeros) which we will later command to the limb
angles_r['right_s0']=0.0
angles_r['right_s1']=0.0
angles_r['right_e0']=0.0
angles_r['right_e1']=0.0
angles_r['right_w0']=0.0
angles_r['right_w1']=0.0
angles_r['right_w2']=0.0

### Assignment execution - Task 1: Define object locations ###
# This will be based on the manual work we do to find location coordinates using "Discover limb location" section
neutral_r = {'right_s0': 0.0, 'right_s1': 0.0, 'right_e0': 0.0, 'right_e1': 0.0, 'right_w0': 0.0, 'right_w1': 0.0, 'right_w2': 0.0}
pickup_obj1_r = {'right_s0': 0.0, 'right_s1': 0.0, 'right_e0': 0.0, 'right_e1': 0.0, 'right_w0': 0.0, 'right_w1': 0.0, 'right_w2': 0.0}
pickup_obj2_r = {'right_s0': 0.0, 'right_s1': 0.0, 'right_e0': 0.0, 'right_e1': 0.0, 'right_w0': 0.0, 'right_w1': 0.0, 'right_w2': 0.0}
pickup_obj3_r = {'right_s0': 0.0, 'right_s1': 0.0, 'right_e0': 0.0, 'right_e1': 0.0, 'right_w0': 0.0, 'right_w1': 0.0, 'right_w2': 0.0}
midpoint_r = {'right_s0': 0.0, 'right_s1': 0.0, 'right_e0': 0.0, 'right_e1': 0.0, 'right_w0': 0.0, 'right_w1': 0.0, 'right_w2': 0.0}
drop_obj1_r = {'right_s0': 0.0, 'right_s1': 0.0, 'right_e0': 0.0, 'right_e1': 0.0, 'right_w0': 0.0, 'right_w1': 0.0, 'right_w2': 0.0}
drop_obj2_r = {'right_s0': 0.0, 'right_s1': 0.0, 'right_e0': 0.0, 'right_e1': 0.0, 'right_w0': 0.0, 'right_w1': 0.0, 'right_w2': 0.0}
drop_obj3_r = {'right_s0': 0.0, 'right_s1': 0.0, 'right_e0': 0.0, 'right_e1': 0.0, 'right_w0': 0.0, 'right_w1': 0.0, 'right_w2': 0.0}

### Assignment execution - Task 2: Pick up and move object - block ###
# start robot's right arm in neutral position
limb_r.move_to_joint_positions(neutral_r)

# move the right arm to those pick up joint angle
limb_r.move_to_joint_positions(pickup_obj1_r)

# grip object with right arm & starting position (open & close functions)


# move right arm and object to midpoint position (above the table and near midpoint of robot's horizontal x-axis)
limb_r.move_to_joint_positions(midpoint_r)

# move right arm and object to drop off position
limb_r.move_to_joint_positions(drop_obj1_r)

# drop off object with right arm @ finish location (open function only)
limb_r.move_to_joint_positions(drop_obj1_r)

# return right arm to midpoint then neutral position
limb_r.move_to_joint_positions(midpoint_r)
limb_r.move_to_joint_positions(neutral_r)

### Assignment execution - Task 3: Pick up and move object - water bottle ###
# repeat previous used actions verified and tested in Task 2
# change location functions to correspond to correct object 


### Assignment execution - Task 4: Pick up and move object - ??? ###
# repeat previous used actions verified and tested in Task 2
# change location functions to correspond to correct object 


### Assignment execution - Task 5: Kill Sequence ###
# quit
quit()
